# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Contract {
  createdAt: DateTime!
  description: String
  endDate: BulttiDate!
  id: ID!
  operator: Operator!
  operatorId: Int
  procurementUnits: [ProcurementUnit!]!
  rules: [ContractRule!]
  rulesFile: String
  startDate: BulttiDate!
  updatedAt: DateTime!
  userRelations: [ContractUserRelation!]!
}

type ContractRule {
  category: String!
  code: String
  condition: String
  description: String
  name: String!
  value: String!
}

type ContractUserRelation {
  contract: Contract!
  createdAt: DateTime!
  id: ID!
  relatedBy: ContractUserRelationType!
  subscribed: Boolean!
  updatedAt: DateTime!
  user: User!
}

type Departure {
  allowedOverAge: Float
  blockNumber: String
  dayType: String!
  departureId: String!
  departureType: DepartureType!
  direction: String
  endStop: String
  equipment: Equipment
  equipmentAge: Float
  equipmentExteriorColor: String
  equipmentId: String
  equipmentRegistryDate: BulttiDate
  equipmentRotation: Int
  equipmentTypeRequired: Boolean
  id: ID
  infoSystems: Boolean
  isNextDay: Boolean!
  isTracked: Boolean
  isTrunkRoute: Boolean
  journeyEndTime: String!
  journeyStartTime: String!
  observedEquipmentType: String
  plannedEquipmentType: String
  preInspection: Inspection
  preInspectionId: String
  procurementUnitId: String
  recoveryTime: Int
  registryNr: String
  routeId: String
  routeLength: Int
  schemaId: String
  startStop: String
  terminalTime: Int
  trackReason: TrackReason!
}

type Equipment {
  approvedOverage: Boolean!
  departures: [Departure!]!
  emissionClass: Int!
  equipmentCatalogueQuotas: [EquipmentCatalogueQuota!]!
  executionRequirementQuotas: [ExecutionRequirementQuota!]!
  exteriorColor: String!
  hasInfoSystems: Boolean!
  id: ID!
  model: String
  observedDeparturesObserved: [ObservedDeparture!]!
  operator: Operator!
  operatorId: Int!
  option: Boolean!
  registryDate: BulttiDate
  registryNr: String
  type: String!
  vehicleId: String!
}

type EquipmentCatalogue {
  endDate: String!
  equipmentCatalogueId: String!
  equipmentQuotas: [EquipmentCatalogueQuota!]!
  id: ID!
  operator: Operator!
  operatorId: Int!
  procurementUnit: ProcurementUnit!
  procurementUnitId: String!
  startDate: String!
}

type EquipmentCatalogueQuota {
  catalogueEndDate: BulttiDate!
  catalogueStartDate: BulttiDate!
  equipment: Equipment
  equipmentCatalogue: EquipmentCatalogue
  equipmentCatalogueId: String!
  equipmentId: String!
  id: ID!
  percentageQuota: Float!
}

type EquipmentSearchResult {
  _exists: Boolean!
  emissionClass: Int!
  exteriorColor: String!
  model: String!
  registryDate: BulttiDate
  registryNr: String
  type: String!
  vehicleId: String!
}

type ExecutionRequirement {
  area: OperatingArea!
  areaRequirement: ExecutionRequirement
  areaRequirementId: String
  averageAgeWeighted: Float
  averageAgeWeightedFulfilled: Float
  equipmentQuotas: [ExecutionRequirementQuota!]!
  id: ID!
  inspection: Inspection!
  inspectionId: String!
  operator: Operator!
  operatorId: Float!
  procurementUnit: ProcurementUnit
  procurementUnitId: String
  procurementUnitRequirements: [ExecutionRequirement!]
  requirements: [ExecutionRequirementValue!]!
  totalKilometers: Float
  totalKilometersFulfilled: Float
}

type ExecutionRequirementQuota {
  equipment: Equipment!
  equipmentId: String!
  executionRequirement: ExecutionRequirement!
  executionRequirementId: String!
  id: ID!
  meterRequirement: Float!
  percentageQuota: Float!
}

type ExecutionRequirementValue {
  classSanctionAmount: Float
  cumulativeDifferencePercentage: Float
  differencePercentage: Float
  emissionClass: Int!
  equipmentCount: Int
  equipmentCountFulfilled: Int
  fulfilledAverageAgeWeighted: Int
  kilometerRequirement: Float
  kilometersFulfilled: Float
  quotaFulfilled: Float
  quotaRequirement: Float
  sanctionAmount: Float
  sanctionThreshold: Float
}

type FilterConfig {
  field: String!
  filterValue: String!
}

type HfpDateProgress {
  date: BulttiDate!
  progress: Int!
}

type HfpDateStatus {
  date: BulttiDate!
  status: HfpStatus!
}

type Inspection {
  createdAt: DateTime!
  defectInspection: Inspection
  endDate: BulttiDate
  executionRequirements: [ExecutionRequirement!]!
  id: ID!
  inspectionEndDate: BulttiDate!
  inspectionErrors: [ValidationErrorData!]
  inspectionStartDate: BulttiDate!
  inspectionType: InspectionType!
  minStartDate: BulttiDate!
  name: String
  observedExecutionRequirements: [ObservedExecutionRequirement!]!
  operator: Operator!
  operatorId: Int
  postInspection: Inspection
  preInspection: Inspection
  season: Season!
  seasonId: String!
  startDate: BulttiDate
  status: InspectionStatus!
  updatedAt: DateTime!
  userRelations: [InspectionUserRelation!]!
  version: Int!
  versionStackIdentifier: String
}

type InspectionDate {
  endDate: BulttiDate!
  id: ID!
  startDate: BulttiDate!
}

type InspectionErrorUpdate {
  errorType: String!
  id: ID!
  message: String!
  status: InspectionStatus!
}

type InspectionTimelineItem {
  id: ID!
  inspectionEndDate: BulttiDate!
  inspectionStartDate: BulttiDate!
  operatorName: String!
  seasonId: String!
  version: Int!
}

type InspectionUserRelation {
  createdAt: DateTime!
  id: ID!
  inspection: Inspection!
  relatedBy: InspectionUserRelationType!
  subscribed: Boolean!
  updatedAt: DateTime!
  user: User!
}

type Mutation {
  batchAddToEquipmentCatalogue(catalogueId: String!, vehicleIds: [String!]!): EquipmentCatalogue
  createBlockDeparturesFromFile(dayTypes: [String!]!, file: Upload, inspectionId: String!): [OperatorBlockDeparture!]
  createContract(contractInput: ContractInput!, file: Upload!): Contract!
  createEquipment(catalogueId: String, equipment: EquipmentInput!, executionRequirementId: String, operatorId: Int!): Equipment
  createEquipmentCatalogue(equipmentCatalogue: EquipmentCatalogueInput!, operatorId: Int!, procurementUnitId: String!): EquipmentCatalogue
  createExecutionRequirementsForProcurementUnit(inspectionId: String!, procurementUnitId: String!): ExecutionRequirement
  createInspection(inspection: InitialInspectionInput!): Inspection!
  createInspectionDate(inspectionDate: InspectionDateInput!): InspectionDate!
  createObservedExecutionRequirementsFromPreInspectionRequirements(postInspectionId: String!): [ObservedExecutionRequirement!]!
  generateEquipmentForPreInspection(inspectionId: String!): Boolean!
  inspectionReady(inspectionId: String!): Inspection!
  loadHfpDataForInspectionPeriod(inspectionId: String!): [HfpDateStatus!]!
  login(authorizationCode: String!, isTest: Boolean = false, redirectUri: String = "http://localhost:3001"): String
  logout: Boolean!
  modifyContract(contractInput: ContractInput!, file: Upload): Contract!
  modifyUser(userInput: UserInput!): User!
  publishInspection(inspectionId: String!): Inspection!
  refreshExecutionRequirementForProcurementUnit(executionRequirementId: String!): ExecutionRequirement
  rejectInspection(inspectionId: String!): Inspection!
  removeAllEquipmentFromCatalogue(catalogueId: String!): EquipmentCatalogue!
  removeAllEquipmentFromExecutionRequirement(executionRequirementId: String!): ExecutionRequirement
  removeContract(contractId: String!): Boolean!
  removeDepartureBlocksForDayTypes(dayTypes: [String!]!, inspectionId: String!): Boolean!
  removeEquipmentFromCatalogue(catalogueId: String!, equipmentId: String!): Boolean!
  removeEquipmentFromExecutionRequirement(equipmentId: String!, executionRequirementId: String!): Boolean!
  removeExecutionRequirement(executionRequirementId: String!): Boolean!
  removeInspection(inspectionId: String!): Boolean!
  removeInspectionDate(id: String!): Boolean!
  removeObservedExecutionRequirementsFromPreInspection(postInspectionId: String!): Boolean!
  submitInspection(endDate: BulttiDate!, inspectionId: String!, startDate: BulttiDate!): Inspection!
  toggleContractUserSubscribed(contractId: String!, userId: String!): ContractUserRelation
  toggleInspectionUserSubscribed(inspectionId: String!, userId: String!): InspectionUserRelation
  updateBaseInspection(inspectionId: String!): Inspection!
  updateEquipment(equipment: EquipmentInput!, equipmentId: String!): Equipment
  updateEquipmentCatalogue(catalogueId: String!, equipmentCatalogue: EquipmentCatalogueInput!): EquipmentCatalogue!
  updateEquipmentCatalogueQuota(equipment: EquipmentInput!, equipmentId: String!, quotaId: String): Equipment
  updateEquipmentRequirementQuota(equipment: EquipmentInput!, equipmentId: String!, quotaId: String): Equipment
  updateInspection(inspection: InspectionInput!, inspectionId: String!): Inspection!
  updateObservedExecutionRequirementValues(requirementId: String!, updateValues: [ObservedRequirementValueInput!]!): ObservedExecutionRequirement!
  updateProcurementUnit(procurementUnit: ProcurementUnitEditInput!, procurementUnitId: String!): ProcurementUnit!
  updateWeeklyMetersFromSource(procurementUnitId: String!, startDate: String!): ProcurementUnit!
}

type ObservedDeparture {
  arrivalDateTime: DateTime
  arrivalIsNextDay: Boolean!
  blockJourneyEndTime: String
  blockNumber: String
  date: String!
  dayType: String!
  departureDateTime: DateTime
  departureId: String!
  departureIsNextDay: Boolean!
  destinationStopId: String
  direction: String
  equipmentRotation: Int
  equipmentTypeRequired: Boolean
  id: ID!
  isComplete: Boolean
  isTracked: Boolean
  isTrunkRoute: Boolean
  journeyEndTime: String!
  journeyId: String
  journeyStartTime: String!
  observedArrivalDateTime: DateTime
  observedDepartureDateTime: DateTime
  observedEquipment: Equipment
  observedEquipmentAge: Float
  observedEquipmentId: String
  observedEquipmentType: String
  observedExteriorColor: String
  observedLateArrivalSeconds: Int
  observedLateDepartureSeconds: Int
  observedOperatorId: Int
  observedRegistryDate: String
  observedRegistryNr: String
  originStopId: String
  plannedEquipmentType: String
  plannedOperatorId: Int
  postInspectionId: String
  procurementUnitId: String
  recoveryTime: Int
  routeId: String
  routeLength: Int
  schemaId: String
  terminalTime: Int
  trackReason: TrackReason!
  uniqueVehicleId: String
}

type ObservedExecutionRequirement {
  _sanctionPercentageValue: Float!
  _sanctionThresholdValue: Float!
  area: OperatingArea!
  areaId: Int!
  averageAgeWeightedObserved: Float
  averageAgeWeightedRequired: Float
  endDate: BulttiDate!
  id: ID!
  inspection: Inspection!
  inspectionId: String!
  isCombinedAreaRequirement: Boolean!
  observedRequirements: [ObservedExecutionValue!]!
  operator: Operator!
  operatorId: Int!
  startDate: BulttiDate!
  totalKilometersObserved: Float
  totalKilometersRequired: Float
}

type ObservedExecutionValue {
  averageAgeWeightedObserved: Float
  averageAgeWeightedRequired: Float
  cumulativeDifferencePercentage: Float
  differencePercentage: Float
  emissionClass: Int!
  equipmentCountObserved: Int
  equipmentCountRequired: Int
  id: ID
  kilometersObserved: Float
  kilometersRequired: Float
  observedExecutionRequirement: ObservedExecutionRequirement!
  quotaObserved: Float
  quotaRequired: Float
  sanctionAmount: Float
  sanctionThreshold: Float
  sanctionablePercentage: Float
}

type OperatingArea {
  executionRequirements: [ExecutionRequirement!]
  id: Int!
  name: OperatingAreaName!
  procurementUnits: [ProcurementUnit!]
}

type Operator {
  contracts: [Contract!]!
  equipment: [Equipment!]!
  equipmentCatalogues: [EquipmentCatalogue!]!
  executionRequirements: [ExecutionRequirement!]!
  id: Int!
  inspections: [Inspection!]!
  operatorId: Int!
  operatorName: String!
  procurementUnits: [ProcurementUnit!]!
}

type OperatorBlockDeparture {
  blockNumber: String
  dayType: String!
  direction: String
  equipment: Equipment
  equipmentId: String
  id: ID!
  inspectionId: String
  journeyEndTime: String!
  journeyStartTime: String!
  journeyType: String!
  operatorId: String
  procurementUnitId: String
  registryNr: String
  routeId: String
  routeLength: Int
  vehicleId: String
}

type PageConfig {
  page: Int!
  pageSize: Int!
}

type ProcurementUnit {
  area: OperatingArea
  areaId: Int
  contracts: [Contract!]!
  currentContracts: [Contract!]
  endDate: BulttiDate!
  equipmentCatalogues: [EquipmentCatalogue!]!
  executionRequirements: [ExecutionRequirement!]!
  id: ID!
  medianAgeRequirement: Float!
  operator: Operator!
  operatorId: Int!
  procurementUnitId: String!
  routes: [ProcurementUnitRoute!]!
  startDate: BulttiDate!
  weeklyKilometers: Float!
  weeklyMeters: Float!
}

type ProcurementUnitOption {
  areaName: String
  currentContracts: [Contract!]
  endDate: BulttiDate!
  id: String!
  medianAgeRequirement: Float
  name: String!
  routes: [String!]!
  startDate: BulttiDate!
}

type ProcurementUnitRoute {
  length: Float!
  routeId: String!
}

type Query {
  allInspectionDates: [InspectionDate!]!
  allInspections(inspectionType: InspectionType!): [Inspection!]!
  availableDayTypes(inspectionId: String!): [String!]!
  blockDeparturesForPreInspection(inspectionId: String!): [OperatorBlockDeparture!]!
  contract(contractId: String!): Contract
  contractProcurementUnitOptions(endDate: BulttiDate!, operatorId: Int!, startDate: BulttiDate!): [ProcurementUnitOption!]!
  contractUserRelations(contractId: String!): [ContractUserRelation!]!
  contracts(date: BulttiDate, operatorId: Int): [Contract!]!
  contractsByProcurementUnit(procurementUnitId: String!): [Contract!]!
  currentInspectionByOperatorAndSeason(inspectionType: InspectionType!, operatorId: Int!, seasonId: String!): Inspection
  currentInspectionsByOperatorAndSeason(inspectionType: InspectionType!, operatorId: Int!, seasonId: String!): [Inspection!]!
  currentUser: User
  currentlyLoadingHfpRanges: [HfpDateStatus!]!
  equipment: [Equipment!]!
  equipmentByOperator(operatorId: Int!): [Equipment!]!
  equipmentCatalogue: [EquipmentCatalogue!]!
  equipmentCatalogueByOperator(operatorId: Int!): [EquipmentCatalogue!]!
  executionRequirementForProcurementUnit(inspectionId: String!, procurementUnitId: String!): ExecutionRequirement
  executionRequirementsByOperator(operatorId: Int!): [ExecutionRequirement!]!
  executionRequirementsForPreInspectionAreas(inspectionId: String!): [ExecutionRequirement!]!
  inspection(inspectionId: String!): Inspection
  inspectionUserRelations(inspectionId: String!): [InspectionUserRelation!]!
  inspectionsByOperator(inspectionType: InspectionType!, operatorId: Int!): [Inspection!]!
  inspectionsTimeline(inspectionType: InspectionType!, operatorId: Int!): [InspectionTimelineItem!]!
  loadedHfpRanges: [HfpDateStatus!]!
  observedExecutionRequirements(postInspectionId: String!): [ObservedExecutionRequirement!]!
  operator(operatorId: Int!): Operator
  operators: [Operator!]!
  previewObservedRequirement(requirementId: String!): ObservedExecutionRequirement
  procurementUnit(endDate: BulttiDate!, procurementUnitId: String!, startDate: BulttiDate!): ProcurementUnit
  procurementUnitsByOperator(endDate: BulttiDate!, operatorId: Int!, startDate: BulttiDate!): [ProcurementUnit!]!
  queryEquipmentFromSource(operatorId: Int!, registryNr: String, vehicleId: String): EquipmentSearchResult
  reports(inspectionType: InspectionType!): [ReportListItem!]!
  season(seasonId: String!): [Season!]
  seasons(date: BulttiDate!): [Season!]!
  singleEquipment(equipmentId: String!): Equipment
  singleEquipmentCatalogue(equipmentCatalogueId: String!): EquipmentCatalogue
  trackedDeparturesReport(filters: [InputFilterConfig!], inspectionId: String!, page: InputPageConfig, sort: [InputSortConfig!]): TrackedDeparturesReport!
  user(userId: Int!): User
  users: [User!]!
}

type ReportListItem {
  description: String!
  inspectionType: InspectionType!
  name: String!
  title: String!
}

type Season {
  endDate: BulttiDate!
  id: ID!
  inspections: [Inspection!]!
  season: String!
  startDate: BulttiDate!
}

type SortConfig {
  column: String!
  order: SortOrder!
}

type Subscription {
  hfpLoadingProgress(rangeEnd: String!, rangeStart: String!): HfpDateProgress
  hfpPreloadStatus(rangeEnd: String!, rangeStart: String!): [HfpDateStatus!]
  inspectionError(inspectionId: String!): InspectionErrorUpdate
  inspectionStatus(inspectionId: String!): Inspection
}

type TrackedDeparturesData {
  dayType: String!
  direction: String!
  id: ID!
  journeyEndTime: String!
  journeyStartTime: String!
  routeId: String!
  trackReason: TrackReason!
}

type TrackedDeparturesReport {
  columnLabels: String!
  description: String!
  filteredCount: Int!
  filters: [FilterConfig!]
  inspectionId: String!
  inspectionType: InspectionType!
  name: String!
  operatorId: Float!
  page: PageConfig
  pages: Int!
  reportData: [TrackedDeparturesData!]!
  reportType: ReportType!
  seasonId: String!
  showSanctioned: Boolean
  showUnsanctioned: Boolean
  sort: [SortConfig!]
  title: String!
  totalCount: Int!
}

type User {
  contractRelations: [ContractUserRelation!]!
  email: String!
  hslIdGroups: [String!]
  id: ID!
  inspectionRelations: [InspectionUserRelation!]!
  name: String!
  operatorIds: [Int!]
  organisation: String
  role: UserRole!
}

type ValidationErrorData {
  keys: [String!]
  objectId: String
  referenceKeys: [String!]
  type: InspectionValidationError!
}

enum ContractUserRelationType {
  CREATED_BY
  SUBSCRIBED_TO
  UPDATED_BY
}

enum DepartureType {
  BLOCK
  SCHEMA
}

enum HfpStatus {
  LOADING
  NOT_LOADED
  READY
}

enum InspectionStatus {
  Draft
  InProduction
  InReview
  Processing
  Ready
}

enum InspectionType {
  EQUIPMENT_DEFECT
  POST
  PRE
}

enum InspectionUserRelationType {
  CREATED_BY
  PUBLISHED_BY
  READIED_BY
  REJECTED_BY
  SUBMITTED_BY
  SUBSCRIBED_TO
  UPDATED_BY
}

enum InspectionValidationError {
  CONTRACT_OUTSIDE_INSPECTION_TIME
  HFP_UNAVAILABLE_FOR_INSPECTION_DATES
  INVALID_INSPECTION_TIME
  INVALID_PRODUCTION_TIME
  MISSING_BLOCK_DEPARTURES
  MISSING_CONTRACTS
  MISSING_EQUIPMENT_CATALOGUES
  MISSING_EXECUTION_REQUIREMENTS
  MISSING_REQUIREMENT_QUOTAS
  NOT_POST
  NOT_PRE
}

enum OperatingAreaName {
  CENTER
  OTHER
  UNKNOWN
}

enum ReportType {
  EXECUTION_REQUIREMENT
  LIST
  PAIR_LIST
  SUMMARY
}

enum SortOrder {
  ASC
  DESC
}

enum TrackReason {
  DEADRUN_DETECTED
  DEFAULT_TRACKED
  EQUIPMENT_AGE_VIOLATION
  EQUIPMENT_TYPE_VIOLATION
  EXTERIOR_COLOR_VIOLATION
  EXTRA_DEPARTURE
  FIRST_DEPARTURE_AFTER_DEADRUN
  FIRST_DEPARTURE_IN_BLOCK
  INFO_SYSTEMS_VIOLATION
  MISSING_DEPARTURE
  NOT_TRACKED
  RECOVERY_VIOLATION
  TIMING_STOP_VIOLATION
}

enum UserRole {
  ADMIN
  BLOCKED
  HSL
  OPERATOR
}

input ContractInput {
  description: String
  endDate: BulttiDate
  id: ID
  operatorId: Int
  procurementUnitIds: [String!]
  rulesFile: String
  startDate: BulttiDate
}

input EquipmentCatalogueInput {
  endDate: BulttiDate!
  startDate: BulttiDate!
}

input EquipmentInput {
  emissionClass: Int
  exteriorColor: String
  meterRequirement: Float
  model: String
  percentageQuota: Float
  registryDate: BulttiDate
  registryNr: String
  type: String
  vehicleId: String
}

input InitialInspectionInput {
  endDate: BulttiDate
  inspectionEndDate: BulttiDate
  inspectionStartDate: BulttiDate
  inspectionType: InspectionType!
  name: String
  operatorId: Int!
  seasonId: String!
  startDate: BulttiDate
}

input InputFilterConfig {
  field: String!
  filterValue: String!
}

input InputPageConfig {
  page: Int!
  pageSize: Int!
}

input InputSortConfig {
  column: String!
  order: SortOrder!
}

input InspectionDateInput {
  endDate: BulttiDate!
  startDate: BulttiDate!
}

input InspectionInput {
  endDate: BulttiDate
  inspectionEndDate: BulttiDate
  inspectionStartDate: BulttiDate
  name: String
  startDate: BulttiDate
}

input ObservedRequirementValueInput {
  emissionClass: Int!
  id: ID!
  kilometersRequired: Float
  quotaRequired: Float
  sanctionAmount: Float
}

input ProcurementUnitEditInput {
  medianAgeRequirement: Float!
  weeklyMeters: Float!
}

input UserInput {
  email: String
  hslIdGroups: String
  id: ID!
  name: String
  operatorIds: String
  organisation: String
  role: UserRole
}


"A Date string in YYYY-MM-DD format. The timezone is assumed to be Europe/Helsinki."
scalar BulttiDate

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
