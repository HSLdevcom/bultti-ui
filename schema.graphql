# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type Departure {
  blockNumber: Int!
  departureBlocks: [DepartureBlock!]!
  direction: String
  id: ID!
  journeyEndTime: String!
  journeyStartTime: String!
  procurementUnits: [ProcurementUnit!]!
  routeId: String
}

type DepartureBlock {
  blockNumber: Int!
  dayType: DayType!
  departures: [Departure!]!
  equipment: Equipment
  equipmentRegistryNumber: String
  id: ID!
  operator: Operator!
  preInspection: PreInspection!
  preInspectionId: String!
}

type Equipment {
  departureBlocks: [DepartureBlock!]!
  emissionClass: Int!
  equipmentCatalogueQuotas: [EquipmentCatalogueQuota!]!
  exteriorColor: String!
  id: ID!
  model: String!
  operator: Operator!
  operatorId: Int!
  registryDate: BulttiDate
  registryNr: String
  type: String!
  uniqueVehicleId: String!
  vehicleId: String!
}

type EquipmentCatalogue {
  endDate: String!
  equipmentCatalogueId: String!
  equipmentQuotas: [EquipmentCatalogueQuota!]!
  id: ID!
  operator: Operator!
  operatorId: Int!
  procurementUnit: ProcurementUnit!
  procurementUnitId: String!
  startDate: String!
}

type EquipmentCatalogueQuota {
  catalogueEndDate: BulttiDate!
  catalogueStartDate: BulttiDate!
  equipment: Equipment!
  equipmentCatalogue: EquipmentCatalogue!
  equipmentCatalogueId: String!
  equipmentId: String!
  id: ID!
  meterRequirement: Float!
  percentageQuota: Float!
}

type EquipmentSearchResult {
  _exists: Boolean!
  emissionClass: Int!
  exteriorColor: String!
  model: String!
  registryDate: BulttiDate
  registryNr: String
  type: String!
  vehicleId: String!
}

type ExecutionRequirement {
  area: OperatingArea!
  averageAgeWeighted: Float!
  averageAgeWeightedFulfilled: Float!
  procurementUnit: ProcurementUnit
  requirements: [ExecutionRequirementValue!]!
  totalKilometers: Float!
  totalKilometersFulfilled: Float!
}

type ExecutionRequirementValue {
  cumulativeDifferencePercentage: Float!
  differencePercentage: Float!
  emissionClass: Int!
  equipmentCount: Int!
  equipmentCountFulfilled: Int!
  kilometerRequirement: Float!
  kilometersFulfilled: Float!
  quotaFulfilled: Float!
  quotaRequirement: Float!
}

type Mutation {
  createDepartureBlockFromFile(dayTypes: [DayType!]!, file: Upload, preInspectionId: String!): [DepartureBlock!]
  createEquipment(catalogueId: String!, equipment: EquipmentInput!, operatorId: Int!): Equipment!
  createEquipmentCatalogue(equipmentCatalogue: EquipmentCatalogueInput!, operatorId: Int!, procurementUnitId: String!): EquipmentCatalogue
  createPreInspection(preInspection: InitialPreInspectionInput!): PreInspection!
  login(authorizationCode: String!, isTest: Boolean, redirectUri: String): User
  logout: Boolean!
  publishPreInspection(preInspectionId: String!): PreInspection!
  removeAllEquipmentFromCatalogue(catalogueId: String!): EquipmentCatalogue!
  removeDepartureBlocksForDayTypes(dayTypes: [DayType!]!, preInspectionId: String!): Boolean!
  removeEquipmentFromCatalogue(catalogueId: String!, equipmentId: String!): Boolean!
  removePreInspection(preInspectionId: String!): Boolean!
  updateEquipment(equipment: EquipmentInput!, equipmentId: String!, quotaId: String): Equipment
  updateEquipmentCatalogue(catalogueId: String!, equipmentCatalogue: EquipmentCatalogueInput!): EquipmentCatalogue!
  updatePreInspection(preInspection: PreInspectionInput!, preInspectionId: String!): PreInspection!
  updateProcurementUnit(procurementUnit: ProcurementUnitEditInput!, procurementUnitId: String!): ProcurementUnit!
  updateWeeklyMetersFromSource(procurementUnitId: String!): ProcurementUnit!
}

type OperatingArea {
  id: Int!
  name: OperatingAreaName!
  procurementUnits: [ProcurementUnit!]!
}

type Operator {
  departureBlocks: [DepartureBlock!]!
  equipment: [Equipment!]!
  equipmentCatalogues: [EquipmentCatalogue!]!
  id: Int!
  operatorId: Int!
  operatorName: String!
  preInspections: [PreInspection!]!
  procurementUnits: [ProcurementUnit!]!
}

type PreInspection {
  createdAt: DateTime!
  createdBy: User!
  departureBlocks: [DepartureBlock!]!
  endDate: BulttiDate!
  id: ID!
  minStartDate: BulttiDate
  operator: Operator!
  operatorId: Int
  season: Season!
  seasonId: Int
  startDate: BulttiDate!
  status: InspectionStatus!
  updatedAt: DateTime!
  version: Int!
  versionStackIdentifier: String
}

type ProcurementUnit {
  area: OperatingArea!
  areaId: Int!
  departures: [Departure!]!
  endDate: BulttiDate!
  equipmentCatalogues: [EquipmentCatalogue!]!
  id: ID!
  medianAgeRequirement: Float!
  operator: Operator!
  operatorId: Int!
  procurementUnitId: String!
  routes: [ProcurementUnitRoute!]!
  startDate: BulttiDate!
  weeklyKilometers: Float!
  weeklyMeters: Float!
}

type ProcurementUnitRoute {
  length: Float!
  routeId: String!
}

type Query {
  allPreInspections: [PreInspection!]!
  currentPreInspectionByOperatorAndSeason(operatorId: Int!, seasonId: String!): PreInspection!
  currentPreInspectionsByOperatorAndSeason(operatorId: Int!, seasonId: String!): [PreInspection!]!
  currentUser: User
  departureBlock(departureBlockId: String!): DepartureBlock
  departureBlocksForPreInspection(preInspectionId: String!): [DepartureBlock!]!
  equipment: [Equipment!]!
  equipmentByOperator(operatorId: Int!): [Equipment!]!
  equipmentCatalogue: [EquipmentCatalogue!]!
  equipmentCatalogueByOperator(operatorId: Int!): [EquipmentCatalogue!]!
  executionRequirementsByOperator(operatorId: Int!): [ExecutionRequirement!]!
  executionRequirementsByPreInspection(preInspectionId: String!): [ExecutionRequirement!]!
  executionRequirementsByProcurementUnit(procurementUnitId: String!, startDate: String!): ExecutionRequirement!
  operator(operatorId: Int!): Operator
  operators: [Operator!]!
  preInspection(preInspectionId: String!): PreInspection
  preInspectionsByOperator(operatorId: Int!): [PreInspection!]!
  procurementUnit(procurementUnitId: String!): ProcurementUnit
  procurementUnitsByOperator(date: BulttiDate!, operatorId: Int!): [ProcurementUnit!]!
  queryEquipmentFromSource(operatorId: Int!, registryNr: String, vehicleId: String): EquipmentSearchResult
  seasons(date: BulttiDate!): [Season!]!
  singleEquipment(equipmentId: String!): Equipment
  singleEquipmentCatalogue(equipmentCatalogueId: String!): EquipmentCatalogue
  user(userId: Int!): User
  users: [User!]!
}

type Season {
  endDate: BulttiDate!
  id: ID!
  preInspections: [PreInspection!]!
  season: String!
  startDate: BulttiDate!
}

type User {
  email: String!
  hslIdGroups: [String!]
  id: ID!
  name: String!
  operatorIds: [Int!]
  organisation: String
  preInspections: [PreInspection!]!
  role: UserRole!
}

type VersionedEntity {
  endDate: BulttiDate!
  minStartDate: BulttiDate
  startDate: BulttiDate!
  version: Int!
  versionStackIdentifier: String
}

enum DayType {
  Ke
  La
  Ma
  Pe
  Su
  Ti
  To
}

enum InspectionStatus {
  Draft
  InProduction
}

enum OperatingAreaName {
  CENTER
  OTHER
}

enum UserRole {
  ADMIN
  BLOCKED_USER
  HSL_USER
  OPERATOR_USER
}

input DepartureBlockInput {
  dayType: DayType!
  departures: [DepartureInput!]!
}

input DepartureInput {
  departureTime: String!
  direction: String!
  routeId: String!
  vehicleId: String!
}

input EquipmentCatalogueInput {
  endDate: BulttiDate!
  startDate: BulttiDate!
}

input EquipmentCatalogueQuotaInput {
  equipmentCatalogueId: String!
  equipmentId: String!
  id: ID
  percentageQuota: Float!
}

input EquipmentInput {
  emissionClass: Int
  exteriorColor: String
  meterRequirement: Float
  model: String
  percentageQuota: Float
  registryDate: BulttiDate
  registryNr: String
  type: String
  vehicleId: String
}

input InitialPreInspectionInput {
  endDate: BulttiDate
  operatorId: Int!
  seasonId: String!
  startDate: BulttiDate
}

input PreInspectionInput {
  endDate: BulttiDate
  operatorId: Int
  seasonId: String
  startDate: BulttiDate
}

input ProcurementUnitEditInput {
  medianAgeRequirement: Float!
  weeklyMeters: Float!
}

input ProcurementUnitInput {
  area: Int!
  endDate: BulttiDate!
  id: ID!
  operatorId: Int!
  procurementUnitId: ID!
  routes: [ProcurementUnitRouteInput!]
  startDate: BulttiDate!
  weeklyMeters: Float!
}

input ProcurementUnitRouteInput {
  length: Float!
  routeId: String!
}


"A Date string in YYYY-MM-DD format. The timezone is assumed to be Europe/Helsinki."
scalar BulttiDate

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
