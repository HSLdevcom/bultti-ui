# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union ReportEntityUnion = Departure | DeparturePair | EmissionClassExecutionItem | ExecutionRequirement | MissingEquipment | OperatorBlockDeparture

type Contract {
  createdAt: DateTime!
  description: String
  endDate: BulttiDate!
  id: ID!
  operator: Operator!
  operatorId: Int
  procurementUnits: [ProcurementUnit!]!
  rules: [ContractRule!]
  startDate: BulttiDate!
  updatedAt: DateTime!
  userRelations: [ContractUserRelation!]!
}

type ContractRule {
  category: String
  condition: String
  description: String!
  name: String!
  options: String
  type: RuleType!
  value: String!
}

type ContractUserRelation {
  contract: Contract!
  createdAt: DateTime!
  id: ID!
  relatedBy: ContractUserRelationType!
  subscribed: Boolean!
  updatedAt: DateTime!
  user: User!
}

type Departure {
  allowedOverAge: Float
  blockNumber: String
  dayType: DayType!
  direction: String
  endStop: String
  equipment: Equipment
  equipmentAge: Float
  equipmentExteriorColor: String
  equipmentId: String
  equipmentRotation: Int
  equipmentTypeRequired: Boolean
  id: ID!
  infoSystems: Boolean
  inspection: Inspection
  inspectionId: String
  isTracked: Boolean
  isTrunkRoute: Boolean
  journeyEndTime: String!
  journeyStartTime: String!
  observedEquipmentType: String
  plannedEquipmentType: String
  procurementUnit: ProcurementUnit
  procurementUnitId: String
  recoveryTime: Int
  registryDate: BulttiDate
  registryNr: String
  routeId: String
  routeLength: Int
  schemaId: String
  startStop: String
  terminalTime: Int
  trackReason: TrackReason!
}

type DeparturePair {
  blockNumber: String
  deadrunEndStop: String
  deadrunMinutes: Int
  deadrunPlannedBy: String
  deadrunStartStop: String
  departureA: Departure!
  departureB: Departure!
  groupId: String
  id: ID!
  overlapPlannedBy: String
  overlapSecondsA: Int
  overlapSecondsB: Int
}

type EmissionClassExecutionItem {
  class1: Float
  class10: Float
  class2: Float
  class3: Float
  class4: Float
  class5: Float
  class6: Float
  class7: Float
  class8: Float
  class9: Float
  id: ID!
  procurementUnitId: String
}

type Equipment {
  approvedOverage: Boolean!
  departures: [Departure!]!
  emissionClass: Int!
  equipmentCatalogueQuotas: [EquipmentCatalogueQuota!]!
  executionRequirementQuotas: [ExecutionRequirementQuota!]!
  exteriorColor: String!
  hasInfoSystems: Boolean!
  id: ID!
  model: String
  operator: Operator!
  operatorId: Int!
  option: Boolean!
  registryDate: BulttiDate
  registryNr: String
  type: String!
  uniqueVehicleId: String!
  vehicleId: String!
}

type EquipmentCatalogue {
  endDate: String!
  equipmentCatalogueId: String!
  equipmentQuotas: [EquipmentCatalogueQuota!]!
  id: ID!
  operator: Operator!
  operatorId: Int!
  procurementUnit: ProcurementUnit!
  procurementUnitId: String!
  startDate: String!
}

type EquipmentCatalogueQuota {
  catalogueEndDate: BulttiDate!
  catalogueStartDate: BulttiDate!
  equipment: Equipment
  equipmentCatalogue: EquipmentCatalogue
  equipmentCatalogueId: String!
  equipmentId: String!
  id: ID!
  percentageQuota: Float!
}

type EquipmentSearchResult {
  _exists: Boolean!
  emissionClass: Int!
  exteriorColor: String!
  model: String!
  registryDate: BulttiDate
  registryNr: String
  type: String!
  vehicleId: String!
}

type ExecutionRequirement {
  area: OperatingArea!
  areaRequirement: ExecutionRequirement
  averageAgeWeighted: Float
  averageAgeWeightedFulfilled: Float
  equipmentQuotas: [ExecutionRequirementQuota!]!
  id: ID!
  inspection: Inspection!
  operator: Operator!
  procurementUnit: ProcurementUnit
  procurementUnitId: String
  procurementUnitRequirements: [ExecutionRequirement!]
  requirements: [ExecutionRequirementValue!]!
  totalKilometers: Float
  totalKilometersFulfilled: Float
}

type ExecutionRequirementQuota {
  equipment: Equipment!
  equipmentId: String!
  executionRequirement: ExecutionRequirement!
  executionRequirementId: String!
  id: ID!
  meterRequirement: Float!
  percentageQuota: Float!
}

type ExecutionRequirementValue {
  classSanctionAmount: Float
  cumulativeDifferencePercentage: Float
  differencePercentage: Float
  emissionClass: Int!
  equipmentCount: Int
  equipmentCountFulfilled: Int
  kilometerRequirement: Float
  kilometersFulfilled: Float
  quotaFulfilled: Float
  quotaRequirement: Float
  sanctionAmount: Float
  sanctionThreshold: Float
}

type Inspection {
  createdAt: DateTime!
  endDate: BulttiDate!
  executionRequirements: [ExecutionRequirement!]!
  id: ID!
  inspectionEndDate: BulttiDate
  inspectionStartDate: BulttiDate
  inspectionType: InspectionType
  minStartDate: BulttiDate
  operator: Operator!
  operatorId: Int
  season: Season!
  seasonId: String
  startDate: BulttiDate!
  status: InspectionStatus!
  updatedAt: DateTime!
  userRelations: [InspectionUserRelation!]!
  version: Int!
  versionStackIdentifier: String
}

type InspectionUserRelation {
  createdAt: DateTime!
  id: ID!
  inspection: Inspection!
  relatedBy: InspectionUserRelationType!
  subscribed: Boolean!
  updatedAt: DateTime!
  user: User!
}

type MissingEquipment {
  blockNumber: String
  registryNr: String
}

type Mutation {
  createBlockDeparturesFromFile(dayTypes: [DayType!]!, file: Upload, inspectionId: String!): [OperatorBlockDeparture!]
  createContract(contractInput: ContractInput!): Contract!
  createEquipment(catalogueId: String, equipment: EquipmentInput!, executionRequirementId: String, operatorId: Int!): Equipment
  createEquipmentCatalogue(equipmentCatalogue: EquipmentCatalogueInput!, operatorId: Int!, procurementUnitId: String!): EquipmentCatalogue
  createExecutionRequirementsForProcurementUnit(inspectionId: String!, procurementUnitId: String!): ExecutionRequirement
  createInspection(inspection: InitialInspectionInput!): Inspection!
  createReport(reportInput: ReportInput!): Report!
  generateEquipmentForPreInspection(inspectionId: String!): Boolean!
  login(authorizationCode: String!, isTest: Boolean = false, redirectUri: String = "http://localhost:3001"): String
  logout: Boolean!
  modifyContract(contractInput: ContractInput!): Contract!
  modifyReport(reportInput: ReportInput!): Report!
  modifyUser(userInput: UserInput!): User!
  publishInspection(inspectionId: String!): Inspection!
  refreshExecutionRequirementForProcurementUnit(executionRequirementId: String!): ExecutionRequirement
  rejectInspection(inspectionId: String!): Inspection!
  removeAllEquipmentFromCatalogue(catalogueId: String!): EquipmentCatalogue!
  removeAllEquipmentFromExecutionRequirement(executionRequirementId: String!): ExecutionRequirement
  removeDepartureBlocksForDayTypes(dayTypes: [DayType!]!, inspectionId: String!): Boolean!
  removeEquipmentFromCatalogue(catalogueId: String!, equipmentId: String!): Boolean!
  removeEquipmentFromExecutionRequirement(equipmentId: String!, executionRequirementId: String!): Boolean!
  removeExecutionRequirement(executionRequirementId: String!): Boolean!
  removeInspection(inspectionId: String!): Boolean!
  setReportsOrder(reportOrders: [ReportOrderInput!]!): [Report!]!
  submitInspection(inspectionId: String!): Inspection!
  toggleUserSubscribed(inspectionId: String!, userId: String!): InspectionUserRelation
  updateEquipment(equipment: EquipmentInput!, equipmentId: String!): Equipment
  updateEquipmentCatalogue(catalogueId: String!, equipmentCatalogue: EquipmentCatalogueInput!): EquipmentCatalogue!
  updateEquipmentCatalogueQuota(equipment: EquipmentInput!, equipmentId: String!, quotaId: String): Equipment
  updateEquipmentRequirementQuota(equipment: EquipmentInput!, equipmentId: String!, quotaId: String): Equipment
  updateInspection(inspection: InspectionInput!, inspectionId: String!): Inspection!
  updateProcurementUnit(procurementUnit: ProcurementUnitEditInput!, procurementUnitId: String!): ProcurementUnit!
  updateWeeklyMetersFromSource(procurementUnitId: String!, startDate: String!): ProcurementUnit!
}

type OperatingArea {
  executionRequirements: [ExecutionRequirement!]
  id: Int!
  name: OperatingAreaName!
  procurementUnits: [ProcurementUnit!]
}

type Operator {
  contracts: [Contract!]!
  equipment: [Equipment!]!
  equipmentCatalogues: [EquipmentCatalogue!]!
  executionRequirements: [ExecutionRequirement!]!
  id: Int!
  inspections: [Inspection!]!
  operatorId: Int!
  operatorName: String!
  procurementUnits: [ProcurementUnit!]!
}

type OperatorBlockDeparture {
  blockNumber: String
  dayType: DayType!
  direction: String
  equipment: Equipment
  equipmentId: String
  id: ID!
  inspectionId: String
  journeyEndTime: String!
  journeyStartTime: String!
  journeyType: String!
  operatorId: String
  procurementUnitId: String
  registryNr: String
  routeId: String
  routeLength: Int
  vehicleId: String
}

type ProcurementUnit {
  area: OperatingArea
  areaId: Int
  contracts: [Contract!]!
  endDate: BulttiDate!
  equipmentCatalogues: [EquipmentCatalogue!]!
  executionRequirements: [ExecutionRequirement!]!
  id: ID!
  medianAgeRequirement: Float!
  operator: Operator!
  operatorId: Int!
  procurementUnitId: String!
  routes: [ProcurementUnitRoute!]!
  startDate: BulttiDate!
  weeklyKilometers: Float!
  weeklyMeters: Float!
}

type ProcurementUnitOption {
  areaName: String
  endDate: BulttiDate!
  id: String!
  medianAgeRequirement: Float
  name: String!
  routes: [String!]!
  startDate: BulttiDate!
}

type ProcurementUnitRoute {
  length: Float!
  routeId: String!
}

type Query {
  allInspections(inspectionType: InspectionType!): [Inspection!]!
  availableDayTypes(inspectionId: String!): [String!]!
  blockDeparturesForPreInspection(inspectionId: String!): [OperatorBlockDeparture!]!
  contract(contractId: String!): Contract
  contractProcurementUnitOptions(date: BulttiDate!, operatorId: Int!): [ProcurementUnitOption!]!
  contracts(date: BulttiDate, operatorId: Int): [Contract!]!
  contractsByProcurementUnit(procurementUnitId: String!): [Contract!]!
  currentInspectionByOperatorAndSeason(inspectionType: InspectionType!, operatorId: Int!, seasonId: String!): Inspection
  currentInspectionsByOperatorAndSeason(inspectionType: InspectionType!, operatorId: Int!, seasonId: String!): [Inspection!]!
  currentUser: User
  equipment: [Equipment!]!
  equipmentByOperator(operatorId: Int!): [Equipment!]!
  equipmentCatalogue: [EquipmentCatalogue!]!
  equipmentCatalogueByOperator(operatorId: Int!): [EquipmentCatalogue!]!
  executionRequirementForProcurementUnit(inspectionId: String!, procurementUnitId: String!): ExecutionRequirement
  executionRequirementsByOperator(operatorId: Int!): [ExecutionRequirement!]!
  executionRequirementsForPreInspectionAreas(inspectionId: String!): [ExecutionRequirement!]!
  inspection(inspectionId: String!): Inspection
  inspectionReportByName(inspectionId: String!, inspectionType: InspectionType!, reportName: String!): Report
  inspectionUserRelations(inspectionId: String!): [InspectionUserRelation!]!
  inspectionsByOperator(inspectionType: InspectionType!, operatorId: Int!): [Inspection!]!
  operator(operatorId: Int!): Operator
  operators: [Operator!]!
  procurementUnit(procurementUnitId: String!): ProcurementUnit
  procurementUnitsByOperator(date: BulttiDate!, operatorId: Int!): [ProcurementUnit!]!
  queryEquipmentFromSource(operatorId: Int!, registryNr: String, vehicleId: String): EquipmentSearchResult
  reportCreatorOptions: [ReportCreatorOption!]!
  reports(inspectionType: InspectionType): [Report!]!
  season(seasonId: String!): [Season!]
  seasons(date: BulttiDate!): [Season!]!
  singleEquipment(equipmentId: String!): Equipment
  singleEquipmentCatalogue(equipmentCatalogueId: String!): EquipmentCatalogue
  user(userId: Int!): User
  users: [User!]!
}

type Report {
  _defaultParams: String
  columnLabels: String
  description: String!
  id: ID!
  inspection: Inspection
  inspectionTypes: [InspectionType!]
  name: String!
  operator: Operator
  order: Int!
  params: String
  reportEntities: [ReportEntityUnion!]!
  reportType: ReportType
  season: Season
  title: String!
}

type ReportCreatorOption {
  columnLabels: String!
  inspectionTypes: [InspectionType!]!
  name: String!
  params: String!
  reportType: ReportType!
}

type Season {
  endDate: BulttiDate!
  id: ID!
  inspections: [Inspection!]!
  season: String!
  startDate: BulttiDate!
}

type User {
  contractRelations: [ContractUserRelation!]!
  email: String!
  hslIdGroups: [String!]
  id: ID!
  inspectionRelations: [InspectionUserRelation!]!
  name: String!
  operatorIds: [Int!]
  organisation: String
  role: UserRole!
}

enum ContractUserRelationType {
  CREATED_BY
  SUBSCRIBED_TO
  UPDATED_BY
}

enum DayType {
  Ke
  La
  Ma
  Pe
  Su
  Ti
  To
}

enum InspectionStatus {
  Draft
  InProduction
  InReview
}

enum InspectionType {
  POST
  PRE
}

enum InspectionUserRelationType {
  CREATED_BY
  PUBLISHED_BY
  REJECTED_BY
  SUBMITTED_BY
  SUBSCRIBED_TO
  UPDATED_BY
}

enum OperatingAreaName {
  CENTER
  OTHER
  UNKNOWN
}

enum ReportType {
  EXECUTION_REQUIREMENT
  LIST
  PAIR_LIST
  SUMMARY
}

enum RuleType {
  CONDITIONAL_VALUE
  ENUM_VALUE
  MULTI_VALUE
  SCALAR_VALUE
}

enum TrackReason {
  DEADRUN_DETECTED
  EQUIPMENT_AGE_VIOLATION
  EQUIPMENT_TYPE_VIOLATION
  EXTERIOR_COLOR_VIOLATION
  EXTRA_DEPARTURE
  FIRST_DEPARTURE_AFTER_DEADRUN
  FIRST_DEPARTURE_IN_BLOCK
  INFO_SYSTEMS_VIOLATION
  MISSING_DEPARTURE
  NOT_TRACKED
  RECOVERY_VIOLATION
}

enum UserRole {
  ADMIN
  BLOCKED
  HSL
  OPERATOR
}

input ContractInput {
  description: String
  endDate: BulttiDate
  id: ID
  operatorId: Int
  procurementUnitIds: [String!]
  rules: [ContractRuleInput!]
  startDate: BulttiDate
}

input ContractRuleInput {
  description: String
  name: String
  type: RuleType
  value: String
}

input EquipmentCatalogueInput {
  endDate: BulttiDate!
  startDate: BulttiDate!
}

input EquipmentInput {
  emissionClass: Int
  exteriorColor: String
  meterRequirement: Float
  model: String
  percentageQuota: Float
  registryDate: BulttiDate
  registryNr: String
  type: String
  vehicleId: String
}

input InitialInspectionInput {
  endDate: BulttiDate
  inspectionEndDate: BulttiDate
  inspectionStartDate: BulttiDate
  inspectionType: InspectionType!
  operatorId: Int!
  seasonId: String!
  startDate: BulttiDate
}

input InspectionInput {
  endDate: BulttiDate
  inspectionEndDate: BulttiDate
  inspectionStartDate: BulttiDate
  startDate: BulttiDate
}

input ProcurementUnitEditInput {
  medianAgeRequirement: Float!
  weeklyMeters: Float!
}

input ReportInput {
  description: String!
  id: ID
  name: String!
  order: Int
  params: String!
  title: String!
}

input ReportOrderInput {
  id: ID!
  order: Int!
}

input UserInput {
  email: String
  hslIdGroups: String
  id: ID!
  name: String
  operatorIds: String
  organisation: String
  role: UserRole
}


"A Date string in YYYY-MM-DD format. The timezone is assumed to be Europe/Helsinki."
scalar BulttiDate

"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
