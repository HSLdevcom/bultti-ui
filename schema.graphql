# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type DepartureBlock {
  blockFile: String!
  dayType: String
  departureTime: String!
  direction: String!
  id: String!
  preInspection: PreInspection
  preInspectionId: String!
  routeId: String!
  variant: String
  vehicleId: String!
}

type Equipment {
  co2: Float
  emissionClass: String
  equipmentCatalogue: EquipmentCatalogue
  equipmentCatalogueId: String
  exteriorColor: String
  id: ID!
  make: String
  model: String
  operator: Operator
  operatorId: Int
  percentageQuota: Int
  registryDate: Date
  registryNr: String
  type: String
  vehicleId: String
}

type EquipmentCatalogue {
  endDate: Date
  equipment: [Equipment!]!
  id: ID!
  operator: Operator
  operatorId: Int
  procurementUnit: ProcurementUnit
  procurementUnitId: String
  startDate: Date
}

type ExecutionRequirement {
  area: OperatingArea!
  equipmentClass: Int!
  requirement: [ExecutionRequirementValue!]
}

type ExecutionRequirementValue {
  equipmentClass: String!
  kilometerRequirement: Float!
  quotaRequirement: Float!
}

type File {
  encoding: String!
  filename: String!
  mimetype: String!
}

type Mutation {
  createEquipmentCatalogue(catalogueData: EquipmentCatalogueInput): EquipmentCatalogue
  createPreInspection: PreInspection
  uploadDepartureBlocks(file: Upload, inspectionId: String!): [DepartureBlock!]
}

type Operator {
  equipment: [Equipment!]
  equipmentCatalogues: [EquipmentCatalogue!]
  executionRequirements: [ExecutionRequirement!]
  id: Int!
  operatorName: String!
  preInspections: [PreInspection!]
  procurementUnits: [ProcurementUnit!]
}

type PreInspection {
  createdAt: Date!
  createdBy: String!
  departureBlocks: [DepartureBlock!]
  endDate: Date
  executionRequirements: [ExecutionRequirement!]
  id: String!
  operator: Operator
  operatorId: Int
  productionEnd: Date
  productionStart: Date
  season: Season
  seasonId: String
  startDate: Date
  status: InspectionStatus!
}

type ProcurementUnit {
  endDate: Date
  equipmentCatalogues: [EquipmentCatalogue!]
  id: ID!
  operatingArea: OperatingArea
  operationEndDate: Date
  operationStartDate: Date
  operator: Operator
  operatorId: Int!
  procurementUnitId: String!
  routes: [ProcurementUnitRoute]
  startDate: Date
  weeklyExecutionMeters: Int
}

type ProcurementUnitRoute {
  length: Int
  routeId: String!
}

type Query {
  equipment(equipmentCatalogueId: String, operatorId: Int): [Equipment!]
  equipmentCatalogue(equipmentCatalogueId: String, operatorId: Int): EquipmentCatalogue
  equipmentCatalogues(operatorId: Int, procurementUnitId: String): [EquipmentCatalogue!]
  operator(operatorId: Int): Operator
  operators: [Operator!]
  procurementUnit(operatorId: Int, procurementUnitId: String, startDate: Date): ProcurementUnit
  procurementUnits(operatorId: Int, startDate: Date): [ProcurementUnit!]
  routes: [Route!]
  seasons(date: Date): [Season!]
  uploads: [String]
}

type Route {
  area: OperatingArea!
  direction: Int!
  id: ID!
  procurementUnit: ProcurementUnit
  procurementUnitId: String
  routeId: String!
}

type Season {
  endDate: Date!
  id: String!
  season: Int!
  startDate: Date!
}

enum DepartureType {
  I
  N
  O
}

enum InspectionStatus {
  DRAFT
  IN_PRODUCTION
}

enum OperatingArea {
  CENTER
  OTHER
}

input EquipmentCatalogueInput {
  endDate: Date
  operatorId: Int
  procurementUnitId: String
  startDate: Date
}

input ExecutionRequirementInput {
  area: OperatingArea!
  equipmentClass: Int!
  requirement: String!
}

input PreInspectionInput {
  endDate: String!
  executionRequirements: [ExecutionRequirementInput!]!
  operatorId: Int!
  productionEnd: String!
  productionStart: String!
  season: SeasonInput!
  startDate: String!
}

input SeasonInput {
  endDate: Date
  id: String!
  season: String
  startDate: Date
}


"A Date string in YYYY-MM-DD format. The timezone is assumed to be Europe/Helsinki."
scalar Date

scalar Upload

"A DateTime string in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Timezone will be converted to Europe/Helsinki."
scalar DateTime
